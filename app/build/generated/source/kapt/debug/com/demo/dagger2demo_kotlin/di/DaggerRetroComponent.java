// Generated by Dagger (https://dagger.dev).
package com.demo.dagger2demo_kotlin.di;

import com.demo.dagger2demo_kotlin.di.viewmodel.MainActivityViewModel;
import com.demo.dagger2demo_kotlin.di.viewmodel.MainActivityViewModel_MembersInjector;
import com.demo.dagger2demo_kotlin.di.viewmodel.ParallelCallCoroutineViewModel;
import com.demo.dagger2demo_kotlin.di.viewmodel.ParallelCallCoroutineViewModel_MembersInjector;
import com.demo.dagger2demo_kotlin.di.viewmodel.UserViewModel;
import com.demo.dagger2demo_kotlin.di.viewmodel.UserViewModel_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerRetroComponent implements RetroComponent {
  private Provider<Retrofit> getRetroFitInstanceProvider;

  private Provider<RetroServiceInterface> getRetroServiceInterfaceProvider;

  private DaggerRetroComponent(RetroModule retroModuleParam) {

    initialize(retroModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static RetroComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final RetroModule retroModuleParam) {
    this.getRetroFitInstanceProvider = DoubleCheck.provider(RetroModule_GetRetroFitInstanceFactory.create(retroModuleParam));
    this.getRetroServiceInterfaceProvider = DoubleCheck.provider(RetroModule_GetRetroServiceInterfaceFactory.create(retroModuleParam, getRetroFitInstanceProvider));
  }

  @Override
  public void inject(MainActivityViewModel mainActivityViewModel) {
    injectMainActivityViewModel(mainActivityViewModel);
  }

  @Override
  public void inject(UserViewModel userViewModel) {
    injectUserViewModel(userViewModel);
  }

  @Override
  public void inject(ParallelCallCoroutineViewModel parallelCallCoroutineViewModel) {
    injectParallelCallCoroutineViewModel(parallelCallCoroutineViewModel);
  }

  private MainActivityViewModel injectMainActivityViewModel(MainActivityViewModel instance) {
    MainActivityViewModel_MembersInjector.injectMService(instance, getRetroServiceInterfaceProvider.get());
    return instance;
  }

  private UserViewModel injectUserViewModel(UserViewModel instance) {
    UserViewModel_MembersInjector.injectMService(instance, getRetroServiceInterfaceProvider.get());
    return instance;
  }

  private ParallelCallCoroutineViewModel injectParallelCallCoroutineViewModel(
      ParallelCallCoroutineViewModel instance) {
    ParallelCallCoroutineViewModel_MembersInjector.injectMService(instance, getRetroServiceInterfaceProvider.get());
    return instance;
  }

  public static final class Builder {
    private RetroModule retroModule;

    private Builder() {
    }

    public Builder retroModule(RetroModule retroModule) {
      this.retroModule = Preconditions.checkNotNull(retroModule);
      return this;
    }

    public RetroComponent build() {
      if (retroModule == null) {
        this.retroModule = new RetroModule();
      }
      return new DaggerRetroComponent(retroModule);
    }
  }
}
